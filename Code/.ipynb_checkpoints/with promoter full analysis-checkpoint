{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"with promoter full analysis","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"PpUevuPzz3ur"},"source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy\n","from pylab import rcParams\n","import sklearn\n","import urllib\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn import neighbors\n","from sklearn import preprocessing\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics\n","from sklearn.metrics import r2_score\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import mean_squared_error\n","from math import sqrt\n","import seaborn as sns"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EvK4XH9yz9_9","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1600171073894,"user_tz":-360,"elapsed":985,"user":{"displayName":"Tamanna Tanni","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgYnty5A17q4rMLTSf8uBw8d8gRwKSeblw2lBimjg=s64","userId":"09930345314930669741"}},"outputId":"de439956-bf17-4a1b-f035-ee14f30ef5e1"},"source":["'''from google.colab import drive\n","drive.unmount('/content/drive', force_remount=True)\n","os.chdir(\"drive/My Drive/using/\")\n","os.listdir()'''"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'from google.colab import drive\\ndrive.unmount(\\'/content/drive\\', force_remount=True)\\nos.chdir(\"drive/My Drive/using/\")\\nos.listdir()'"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"GsfU2HREY6N3","colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"status":"ok","timestamp":1600171077208,"user_tz":-360,"elapsed":1008,"user":{"displayName":"Tamanna Tanni","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgYnty5A17q4rMLTSf8uBw8d8gRwKSeblw2lBimjg=s64","userId":"09930345314930669741"}},"outputId":"2f11a221-ad3c-426c-b258-23c18e9e3fe7"},"source":["df = pd.read_csv('Chr15_Loc_to_CGI_P.csv')\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>chromosome number</th>\n","      <th>start position</th>\n","      <th>end position</th>\n","      <th>fraction of reads have dna methylation</th>\n","      <th>Loc to CGI</th>\n","      <th>Loc_to_promoter</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15</td>\n","      <td>17000043</td>\n","      <td>17000045</td>\n","      <td>NaN</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15</td>\n","      <td>17000186</td>\n","      <td>17000188</td>\n","      <td>0.416667</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15</td>\n","      <td>17000252</td>\n","      <td>17000254</td>\n","      <td>0.914286</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15</td>\n","      <td>17000408</td>\n","      <td>17000410</td>\n","      <td>0.670732</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15</td>\n","      <td>17000423</td>\n","      <td>17000425</td>\n","      <td>0.978495</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>897759</th>\n","      <td>15</td>\n","      <td>101980785</td>\n","      <td>101980787</td>\n","      <td>0.897959</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>897760</th>\n","      <td>15</td>\n","      <td>101980791</td>\n","      <td>101980793</td>\n","      <td>0.843137</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>897761</th>\n","      <td>15</td>\n","      <td>101980797</td>\n","      <td>101980799</td>\n","      <td>0.905660</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>897762</th>\n","      <td>15</td>\n","      <td>101980811</td>\n","      <td>101980813</td>\n","      <td>0.672727</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>897763</th>\n","      <td>15</td>\n","      <td>101980889</td>\n","      <td>101980891</td>\n","      <td>0.875000</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>897764 rows Ã— 6 columns</p>\n","</div>"],"text/plain":["        chromosome number  start position  ...  Loc to CGI  Loc_to_promoter\n","0                      15        17000043  ...       False                0\n","1                      15        17000186  ...       False                0\n","2                      15        17000252  ...       False                0\n","3                      15        17000408  ...       False                0\n","4                      15        17000423  ...       False                0\n","...                   ...             ...  ...         ...              ...\n","897759                 15       101980785  ...       False                0\n","897760                 15       101980791  ...       False                0\n","897761                 15       101980797  ...       False                0\n","897762                 15       101980811  ...       False                0\n","897763                 15       101980889  ...       False                0\n","\n","[897764 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"eUy375h9_QHG","colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"status":"ok","timestamp":1600171081284,"user_tz":-360,"elapsed":1263,"user":{"displayName":"Tamanna Tanni","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgYnty5A17q4rMLTSf8uBw8d8gRwKSeblw2lBimjg=s64","userId":"09930345314930669741"}},"outputId":"d6f128ce-44f3-4f4a-c28f-dc171aaa18c2"},"source":["df = df.dropna()\n","df = df.reset_index()\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>chromosome number</th>\n","      <th>start position</th>\n","      <th>end position</th>\n","      <th>fraction of reads have dna methylation</th>\n","      <th>Loc to CGI</th>\n","      <th>Loc_to_promoter</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>15</td>\n","      <td>17000186</td>\n","      <td>17000188</td>\n","      <td>0.416667</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>15</td>\n","      <td>17000252</td>\n","      <td>17000254</td>\n","      <td>0.914286</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>17000408</td>\n","      <td>17000410</td>\n","      <td>0.670732</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>15</td>\n","      <td>17000423</td>\n","      <td>17000425</td>\n","      <td>0.978495</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>17000530</td>\n","      <td>17000532</td>\n","      <td>0.756522</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>855010</th>\n","      <td>897759</td>\n","      <td>15</td>\n","      <td>101980785</td>\n","      <td>101980787</td>\n","      <td>0.897959</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>855011</th>\n","      <td>897760</td>\n","      <td>15</td>\n","      <td>101980791</td>\n","      <td>101980793</td>\n","      <td>0.843137</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>855012</th>\n","      <td>897761</td>\n","      <td>15</td>\n","      <td>101980797</td>\n","      <td>101980799</td>\n","      <td>0.905660</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>855013</th>\n","      <td>897762</td>\n","      <td>15</td>\n","      <td>101980811</td>\n","      <td>101980813</td>\n","      <td>0.672727</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>855014</th>\n","      <td>897763</td>\n","      <td>15</td>\n","      <td>101980889</td>\n","      <td>101980891</td>\n","      <td>0.875000</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>855015 rows Ã— 7 columns</p>\n","</div>"],"text/plain":["         index  chromosome number  ...  Loc to CGI  Loc_to_promoter\n","0            1                 15  ...       False                0\n","1            2                 15  ...       False                0\n","2            3                 15  ...       False                0\n","3            4                 15  ...       False                0\n","4            5                 15  ...       False                0\n","...        ...                ...  ...         ...              ...\n","855010  897759                 15  ...       False                0\n","855011  897760                 15  ...       False                0\n","855012  897761                 15  ...       False                0\n","855013  897762                 15  ...       False                0\n","855014  897763                 15  ...       False                0\n","\n","[855015 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"gJmGGBcUwIF3","colab":{"base_uri":"https://localhost:8080/","height":384},"executionInfo":{"status":"ok","timestamp":1600171547535,"user_tz":-360,"elapsed":451507,"user":{"displayName":"Tamanna Tanni","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgYnty5A17q4rMLTSf8uBw8d8gRwKSeblw2lBimjg=s64","userId":"09930345314930669741"}},"outputId":"4d62cc13-3de5-47ce-d46f-f9688df27378"},"source":["best = 0\n","for i in range(20):\n","  train, validate, test = np.split(df.sample(frac=1), [int(.6*len(df)), int(.8*len(df))])\n","  x_train = train.iloc[:,[2,5,6]].values\n","  y_train = train.iloc[:,4].values\n","  x_validate = validate.iloc[:,[2,5,6]].values\n","  y_validate = validate.iloc[:,4].values\n","  x_test = test.iloc[:,[2,5,6]].values\n","  y_test = test.iloc[:,4].values\n","  r = []\n","  for k in range(3,8):\n","    clf=neighbors.KNeighborsRegressor(n_neighbors=k)\n","    clf.fit(x_train, y_train)\n","    y_pred = clf.predict(x_validate)\n","    #error = sqrt(mean_squared_error(y_validate, y_pred))\n","    #print('RMSE value for k= ', k, 'is: ', error )\n","    acc = clf.score(x_validate,y_validate)\n","    r.append(acc)\n","  print(r)\n","  '''print(r[0],r[1])\n","  if r[0]>r[1]:\n","    best+=1\n","  print(i, best,':')\n","print(best)'''\n","    # curve = pd.DataFrame(rmse_k)\n","    # curve.plot(k, rmse_k)\n","    # curve.xlabel('Number of Neighbors')\n","    # curve.ylabel('Route Mean Square Errors')\n","    # curve.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.5086407534321422, 0.5208717454419871, 0.5261448904909398, 0.5264015907535927, 0.5249063410697685]\n","[0.5076624259773894, 0.5201817628747861, 0.5228452213260507, 0.5238761248673722, 0.5224483594754218]\n","[0.5105506163678103, 0.5219377029212408, 0.5268614078975861, 0.5264195516128111, 0.5245292756246027]\n","[0.5079768406908554, 0.5189874286522298, 0.5234678980755343, 0.5247946470677674, 0.5232756417197029]\n","[0.5067674219820753, 0.5206614862002888, 0.5251601719940113, 0.5253367417063979, 0.523361684274827]\n","[0.5117955676849211, 0.5235845511283475, 0.5272048480544814, 0.5277370045523873, 0.5262685175174502]\n","[0.5114190002981401, 0.5235279283738317, 0.5287732242689858, 0.5279732056633519, 0.5258829166581523]\n","[0.5090948437885254, 0.520836788362687, 0.524449269612086, 0.5250304044077971, 0.5230864666442012]\n","[0.5056542605203389, 0.5180569333027487, 0.5222454786495989, 0.5228897079430861, 0.5210594068819316]\n","[0.5103739899323017, 0.5211736588093239, 0.5243429812395437, 0.5245582939079281, 0.5225652622047494]\n","[0.5089037013033724, 0.5217993762110997, 0.5263530098770857, 0.527743852672366, 0.5262210416918798]\n","[0.5104495581195606, 0.5226767447118477, 0.5263857595282823, 0.5267505784928683, 0.5251220719169428]\n","[0.5051392489151809, 0.5165794917530739, 0.5209686515569646, 0.5213294899277376, 0.5204336336767089]\n","[0.5098451360975007, 0.5213253926617816, 0.5257369082832128, 0.5256769414015328, 0.5237280707739658]\n","[0.5095458170215306, 0.5210980235384657, 0.5256630200676582, 0.5256043103305446, 0.5243894633686024]\n","[0.510103543018253, 0.5231057217530701, 0.5278401591590725, 0.5276822350064874, 0.5254648161871814]\n","[0.5101081122911226, 0.5215834130308779, 0.525622140484183, 0.5259880566835293, 0.5246083716766556]\n","[0.5085584197769348, 0.5201595099796488, 0.5238906913223338, 0.5237548622611967, 0.5227820600361177]\n","[0.5132528053151588, 0.5238834546595448, 0.5281964304043288, 0.5288259382038321, 0.5275810163591574]\n","[0.511117382510762, 0.5233677341265655, 0.527878217332548, 0.5278984385565301, 0.5271405583672231]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nAVNwda5ZFmY","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1600088879250,"user_tz":-360,"elapsed":1111,"user":{"displayName":"Nishat Tamanna","photoUrl":"","userId":"15916165458565096949"}},"outputId":"c4c9fabf-9961-4a4b-9588-428c1d3ec64c"},"source":["train, validate, test = np.split(df.sample(frac=1), [int(.6*len(df)), int(.8*len(df))])\n","x_train = train.iloc[:,[2,5,6]].values\n","y_train = train.iloc[:,4].values\n","x_validate = validate.iloc[:,[2,5,6]].values\n","y_validate = validate.iloc[:,4].values\n","x_test = test.iloc[:,[2,5,6]].values\n","y_test = test.iloc[:,4].values\n","clf=neighbors.KNeighborsRegressor(n_neighbors = 6)\n","clf.fit(x_train, y_train)\n","y_pred = clf.predict(x_validate)\n","y_pred1 = clf.predict(x_test)\n","print ('MAE =',mean_absolute_error(y_validate, y_pred))\n","print ('MSE =',mean_squared_error(y_validate, y_pred))\n","print ('RMS =',sqrt(mean_squared_error(y_validate, y_pred)))\n","clf.score(x_validate,y_validate)\n","    # curve = pd.DataFrame(rmse_k)\n","    # curve.plot(k, rmse_k)\n","    # curve.xlabel('Number of Neighbors')\n","    # curve.ylabel('Route Mean Square Errors')\n","    # curve.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MAE = 0.17234620958423846\n","MSE = 0.055256783835061773\n","RMS = 0.235067615453643\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0.21686293127784229"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"o5kMitDTZJl2"},"source":["#print ('R Squared =',r2_score(y_validate, y_pred))\n","# sns.distplot((y_pred),bins=50, color=\"B\", axlabel='Y Predicted Value', label='Beta value - Predicted values vs Real Values');\n","# sns.distplot((y_validate),bins=50, color=\"Y\", axlabel='Y Predicted Value', label='Beta value - Predicted values vs Real Values');\n","# # sns.lmplot( x='x', y='y', data=df, fit_reg=False, hue='x', legend=False, palette=\"Blues\")\n","sns.distplot((y_pred),bins=100,color=\"r\", label=\"Predicted\")\n","sns.distplot((y_validate),bins=100,color=\"b\", label=\"Real\")\n","plt.title(\"Real vs Predict data\")\n","plt.legend()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pTaGTTv_ZNdW"},"source":["residual = y_pred1 - y_test #differences between the predict and actual values\n","plt.scatter(y_pred1, residual)#works same as regplot\n","plt.title('Residual Plot of fitted values')\n","sns.regplot(x = y_pred1, y = residual, data = None, scatter = True, color = 'green')"],"execution_count":null,"outputs":[]}]}